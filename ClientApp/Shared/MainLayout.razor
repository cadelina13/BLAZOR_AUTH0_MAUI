@inherits LayoutComponentBase
@inject AuthenticationStateProvider authProvider

<MudThemeProvider />
<MudDialogProvider FullWidth="true"
                   DisableBackdropClick="true"
                   CloseButton="true"
                   Position="DialogPosition.TopCenter" />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Dense Elevation="25">
        <MudIconButton Href="/profile" Edge="Edge.Start" Variant="Variant.Text" Color="Color.Inherit" Icon="@Icons.Material.Outlined.Person"/>
        <AuthorizeView>
            <Authorized>
                <MudLink Color="Color.Inherit" Class="ml-2" Href="/" Typo="Typo.body1">@context.User.Identity.Name</MudLink>
                <MudSpacer/>
                <MudIconButton OnClick="SignOut" Variant="Variant.Text" Color="Color.Inherit" Icon="@Icons.Material.Outlined.Logout" />
            </Authorized>
            <NotAuthorized>
                <MudLink Color="Color.Inherit" Class="ml-2" Href="/" Typo="Typo.body1">Home</MudLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudMainContent>
        <MudContainer Class="pt-3" MaxWidth="MaxWidth.ExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
    @code{
    private async Task SignOut()
    {
        var msg = await dialog.ShowMessageBox("Sign Out", "You are about to end your session. Are you sure?", yesText: "Sign Out", noText: "Cancel");
        if(msg.HasValue && msg.Value)
        {
            var token = await SecureStorage.Default.GetAsync("bearerToken");
            if (!string.IsNullOrEmpty(token))
            {
                SecureStorage.Default.Remove("bearerToken");
                ((AppAuthenticationStateProvider)authProvider).SignOut();
            }
            StateHasChanged();
            nav.NavigateTo("/");
        }
        
    }
}