@page "/profile"
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@code {
    private string Username = "Anonymous User";
    private string Picture = "";
    AccountModel model = new();
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        Username = state.User.Identity.Name ?? string.Empty;

        Picture = state.User.Claims
                    .Where(c => c.Type.Equals("picture"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;

        var userId = state.User.Claims.Where(c => c.Type.Equals("sub"))
                            .Select(c => c.Value)
                            .FirstOrDefault() ?? string.Empty;
        model = await db.GetUser(userId);
        await base.OnInitializedAsync();
    }

    private async void SaveUpdateUser(ClaimsPrincipal claim)
    {
        var userId = claim.Claims.Where(c => c.Type.Equals("sid"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;
        var firstName = claim.Claims.Where(c => c.Type.Equals("given_name"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;
        var lastName = claim.Claims.Where(c => c.Type.Equals("family_name"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;
        var fullName = claim.Claims.Where(c => c.Type.Equals("name"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;
        var picture = claim.Claims.Where(c => c.Type.Equals("picture"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;
        var user = new AccountModel();
        user.Id = userId;
        user.Fullname = fullName;
        user.FirstName = firstName;
        user.LastName = lastName;
        user.Picture = picture;
        model = await db.UpdateUser(user);
    }
    bool isLoading = false;
    async void saveClick()
    {
        isLoading = true;
        await InvokeAsync(StateHasChanged);
        model = await db.UpdateUser(model);
        snackbar.Add("Profile updated.", Severity.Success);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}
<h1>Hello, @Username!</h1>

<img src="@Picture">

<MudTextField @bind-Value="model.Fullname" ReadOnly Class="mt-2" T="string" Variant="Variant.Outlined" Label="Full Name" />
<MudTextField @bind-Value="model.FirstName" Class="mt-2" T="string" Variant="Variant.Outlined" Label="First Name" />
<MudTextField @bind-Value="model.LastName" Class="mt-2" T="string" Variant="Variant.Outlined" Label="Last Name" />
@if (isLoading)
{
    <MudProgressLinear Size="Size.Small" Color="Color.Primary" Class="mt-1" Indeterminate />
}
<MudButton OnClick="saveClick" Class="mt-2" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">Update</MudButton>